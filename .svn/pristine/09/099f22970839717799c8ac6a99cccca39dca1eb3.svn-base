/**
 * 
 */
package com.testcase;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.SQLException;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.frame.SwingFrame;

/**
 * @author - rahul.rathore
 * @date - 10-Dec-2014
 * @project - Swingapplication
 * @package - com.testcase
 * @file name - TestCase.java
 */
public class TestClassBaseFunction extends Assert {
	
	private static Class clas;
	private static Object object;
	private static Method method;
	
	@BeforeClass
	public static void setUp() {
		try {
			clas = Class.forName("com.function.BaseFunction");
			object = clas.newInstance();
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void testConnectionValidDetails() throws Exception{
			method = clas.getDeclaredMethod("createConnection", String.class,String.class);
			method.invoke(object, "sa","admin1234#");
	}
	
	@Test(expected=InvocationTargetException.class)
	public void testConnectionInvalidLogin() throws Exception{
			method = clas.getDeclaredMethod("createConnection", String.class,String.class);
			method.invoke(object, "sa1","admin1234#");

	}
	
	@Test
	public void testRandomID() throws Exception {
		method = clas.getDeclaredMethod("generateID", int.class);
		int id = (int) method.invoke(object, 99);
		assertTrue(id <= 99);
	}
	
	@Test
	public void testlongRandomID() throws Exception {
		method = clas.getDeclaredMethod("generateID", int.class);
		int id = (int) method.invoke(object, 999999);
		assertTrue(id <= 999999);
	}


}
